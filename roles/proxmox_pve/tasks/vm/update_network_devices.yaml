---
- name: Update network device VM-{{ vm.key }}
  vars:
    existing_net_config: "{{ vm_config['net' + netdev.key | string] | default('', true) }}"
    net_config: "{{ '' if existing_net_config == '' else \
      existing_net_config | split(',') | map('split', '=') | items2dict(key_name=0, value_name=1) }}"
    type: "{{ netdev.value.type | default(pve_vm_defaults.netdev_type, true) }}"
    mac: "{{ netdev.value.mac | default(net_config[type] | default(''), true) }}"
    type_and_mac: "{{ type }}{{ '=' + mac if mac != '' else '' }}"
    updated_net_config:
      "{{ type_and_mac }},bridge={{ netdev.value.bridge | default(pve_vm_defaults.netdev_bridge, true) }},\
      firewall={{ netdev.value.firewall | default(pve_vm_defaults.netdev_firewall) | ternary(1, 0, true) }}\
      {{ ',tag=' + netdev.value.vlan_tag | string if netdev.value.vlan_tag is defined else '' }}"
  ansible.builtin.command: >-
    pvesh set /nodes/{{ ansible_facts.hostname }}/qemu/{{ vm.key }}/config
    --net{{ netdev.key }} {{ updated_net_config }}
  when: updated_net_config != existing_net_config
  changed_when: true
  with_items: "{{ vm.value.network_devices | default({}, true) | dict2items }}"
  loop_control:
    loop_var: netdev

- name: Update cloud-init ipconfigs VM-{{ vm.key }}
  vars:
    existing_ip_config: "{{ vm_config['ipconfig' + ipcfg.key | string] | default('', true) }}"
    updated_ip_config: >
      {{ 'ip=dhcp' if ipcfg.value.dhcp | default(false, true) else 'ip=' + ipcfg.value.ip + ',gw=' + ipcfg.value.gateway }}
  ansible.builtin.command: >-
    pvesh set /nodes/{{ ansible_facts.hostname }}/qemu/{{ vm.key }}/config
    --ipconfig{{ ipcfg.key }} {{ updated_ip_config }}
  when: updated_ip_config != existing_ip_config
  changed_when: true
  with_items: "{{ vm.value.ipconfig | default({}, true) | dict2items }}"
  loop_control:
    loop_var: ipcfg

- name: Remove undeclared network interfaces VM-{{ vm.key }}
  vars:
    net_query: "[?starts_with(key, 'net')].key"
    current_network_devs: "{{ vm_config | dict2items | json_query(net_query) }}"
    network_devs: "{{ ['net'] | product((vm.value.network_devices | default({})).keys()) | map('join', true) | list }}"
    network_devs_to_remove: "{{ current_network_devs | difference(network_devs) | join(',') }}"
  ansible.builtin.command: >-
    pvesh set /nodes/{{ ansible_facts.hostname }}/qemu/{{ vm.key }}/config
    --delete {{ network_devs_to_remove }}
  when: pve_remove_unrefenced.vm and network_devs_to_remove | trim | length > 0
  changed_when: true

- name: Remove undeclared cloud-init ipconfigs VM-{{ vm.key }}
  vars:
    ipcfg_query: "[?starts_with(key, 'ipconfig')].key"
    current_ipconfigs: "{{ vm_config | dict2items | json_query(ipcfg_query) }}"
    ipconfigs: "{{ ['ipconfig'] | product((vm.value.ipconfig | default({})).keys()) | map('join', true) | list }}"
    ipconfigs_to_remove: "{{ current_ipconfigs | difference(ipconfigs) | join(',') }}"
  ansible.builtin.command: >-
    pvesh set /nodes/{{ ansible_facts.hostname }}/qemu/{{ vm.key }}/config
    --delete {{ ipconfigs_to_remove }}
  when: pve_remove_unrefenced.vm and ipconfigs_to_remove | trim | length > 0
  changed_when: true
